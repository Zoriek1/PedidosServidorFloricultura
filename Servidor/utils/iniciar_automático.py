#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script de Automa√ß√£o do Servidor Flask
- Inicia automaticamente √†s 08:00
- Encerra automaticamente √†s 18:30
- Reinicia o servidor se ele cair
- Compat√≠vel com Windows e Linux
"""

import subprocess
import time
import os
import sys
from datetime import datetime, time as dt_time
import signal

# Configura√ß√µes
HORA_INICIO = dt_time(8, 0)   # 08:00
HORA_FIM = dt_time(18, 30)    # 18:30
CHECK_INTERVAL = 60            # Verificar a cada 60 segundos
FLASK_SCRIPT = "app.py"        # Nome do arquivo Flask
DIRETORIO = "static"           # Diret√≥rio onde est√° o app.py

# Vari√°vel global para controlar o processo do servidor Flask
servidor_processo = None

def log(mensagem):
    """Imprime log com timestamp"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] {mensagem}")

def aguardar_horario(hora_alvo):
    """
    Aguarda at√© que o hor√°rio atual seja igual ou posterior √† hora_alvo
    Retorna True imediatamente se j√° passou da hora
    """
    agora = datetime.now().time()
    
    if agora >= hora_alvo:
        log(f"‚úì Hor√°rio j√° √© {agora.strftime('%H:%M')} - servidor pode iniciar")
        return True
    
    log(f"‚è≥ Aguardando at√© {hora_alvo.strftime('%H:%M')}...")
    log(f"   Hor√°rio atual: {agora.strftime('%H:%M')}")
    
    while True:
        agora = datetime.now().time()
        
        if agora >= hora_alvo:
            log(f"‚úì Hor√°rio {agora.strftime('%H:%M')} alcan√ßado!")
            return True
        
        # Aguardar um pouco antes de verificar novamente
        time.sleep(CHECK_INTERVAL)

def servidor_deve_rodar():
    """
    Verifica se o servidor Flask deve estar rodando baseado no hor√°rio
    Retorna True se est√° entre HORA_INICIO e HORA_FIM
    """
    agora = datetime.now().time()
    
    if HORA_INICIO <= HORA_FIM:
        # Hor√°rio normal: 08:00 - 18:30 (mesmo dia)
        deve_rodar = HORA_INICIO <= agora <= HORA_FIM
    else:
        # Hor√°rio que cruza meia-noite (ex: 22:00 - 06:00)
        deve_rodar = (agora >= HORA_INICIO) or (agora <= HORA_FIM)
    
    return deve_rodar

def iniciar_servidor():
    """Inicia o servidor Flask em um processo separado"""
    global servidor_processo
    
    # Se j√° existe um processo rodando, n√£o inicia outro
    if servidor_processo is not None:
        if servidor_processo.poll() is None:
            log("‚ö†Ô∏è Servidor Flask j√° est√° em execu√ß√£o")
            return False
    
    log("üöÄ Iniciando servidor Flask...")
    
    try:
        # Determinar o comando Python correto
        python_cmd = sys.executable
        
        # Montar o caminho completo
        caminho_script = os.path.join(DIRETORIO, FLASK_SCRIPT)
        
        # Iniciar o servidor Flask em background
        if os.name == 'nt':  # Windows
            # No Windows, usar CREATE_NEW_PROCESS_GROUP para evitar que Ctrl+C feche o Flask
            servidor_processo = subprocess.Popen(
                [python_cmd, caminho_script],
                cwd=os.path.dirname(os.path.abspath(__file__)),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NEW_PROCESS_GROUP
            )
        else:  # Linux/Mac
            servidor_processo = subprocess.Popen(
                [python_cmd, caminho_script],
                cwd=os.path.dirname(os.path.abspath(__file__)),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                start_new_session=True
            )
        
        log("‚úÖ Servidor Flask iniciado com sucesso!")
        log(f"   PID: {servidor_processo.pid}")
        
        # Aguardar um momento para verificar se iniciou corretamente
        time.sleep(3)
        
        if servidor_processo.poll() is not None:
            log("‚ùå Servidor Flask encerrou imediatamente ap√≥s iniciar!")
            log("   Verifique os logs e depend√™ncias")
            return False
        
        return True
        
    except FileNotFoundError:
        log("‚ùå Erro: Arquivo app.py n√£o encontrado")
        log(f"   Procurando em: {os.path.abspath(DIRETORIO)}")
        return False
    except Exception as e:
        log(f"‚ùå Erro ao iniciar servidor: {e}")
        return False

def parar_servidor():
    """Para o servidor Flask"""
    global servidor_processo
    
    if servidor_processo is None:
        return
    
    log("üõë Parando servidor Flask...")
    
    try:
        # Enviar sinal de t√©rmino para o processo
        if os.name == 'nt':  # Windows
            servidor_processo.terminate()
        else:  # Linux/Mac
            servidor_processo.send_signal(signal.SIGTERM)
        
        # Aguardar at√© 10 segundos para encerramento graceful
        try:
            servidor_processo.wait(timeout=10)
        except subprocess.TimeoutExpired:
            log("‚ö†Ô∏è Servidor n√£o encerrou a tempo, for√ßando encerramento...")
            servidor_processo.kill()
        
        log("‚úÖ Servidor Flask encerrado")
        servidor_processo = None
        
    except Exception as e:
        log(f"‚ùå Erro ao parar servidor: {e}")

def verificar_servidor():
    """
    Verifica se o servidor Flask est√° rodando
    Retorna True se est√° rodando, False caso contr√°rio
    """
    global servidor_processo
    
    if servidor_processo is None:
        return False
    
    # poll() retorna None se o processo ainda est√° rodando
    if servidor_processo.poll() is None:
        return True
    else:
        # Processo encerrou
        log(f"‚ö†Ô∏è Servidor Flask encerrou (exit code: {servidor_processo.returncode})")
        servidor_processo = None
        return False

def aguardar_proximo_check():
    """Aguarda o intervalo configurado para o pr√≥ximo check"""
    log(f"‚è∞ Pr√≥xima verifica√ß√£o em {CHECK_INTERVAL} segundos...")
    time.sleep(CHECK_INTERVAL)

def main():
    """Fun√ß√£o principal do script"""
    global servidor_processo
    
    log("=" * 60)
    log("üå∫ Automa√ß√£o do Servidor Flask - Plante Uma Flor")
    log("=" * 60)
    log("")
    log(f"üìÖ In√≠cio autom√°tico: {HORA_INICIO.strftime('%H:%M')}")
    log(f"üìÖ Encerramento autom√°tico: {HORA_FIM.strftime('%H:%M')}")
    log(f"üîÑ Intervalo de verifica√ß√£o: {CHECK_INTERVAL} segundos")
    log("")
    
    # Verificar se j√° passou da hora de in√≠cio
    agora = datetime.now().time()
    if agora < HORA_INICIO:
        log(f"‚è∞ Aguardando at√© {HORA_INICIO.strftime('%H:%M')} para iniciar...")
        while True:
            if aguardar_horario(HORA_INICIO):
                break
    
    # Iniciar servidor imediatamente se estiver dentro do hor√°rio
    if servidor_deve_rodar():
        iniciar_servidor()
    
    # Loop principal de monitoramento
    log("üîÑ Iniciando loop de monitoramento...")
    log("   Pressione Ctrl+C para parar o script e o servidor")
    log("")
    
    try:
        while True:
            # Verificar se o servidor deve estar rodando
            deve_rodar = servidor_deve_rodar()
            servidor_rodando = verificar_servidor()
            
            if deve_rodar:
                if not servidor_rodando:
                    log("üîÑ Servidor n√£o est√° rodando, reiniciando...")
                    iniciar_servidor()
                # Servidor est√° rodando, tudo OK
            else:
                if servidor_rodando:
                    log("‚è∞ Hor√°rio de encerramento alcan√ßado, parando servidor...")
                    parar_servidor()
                # Fora do hor√°rio de funcionamento
            
            # Aguardar antes do pr√≥ximo check
            aguardar_proximo_check()
            
    except KeyboardInterrupt:
        log("")
        log("‚ö†Ô∏è Interrup√ß√£o recebida (Ctrl+C)")
        log("üõë Encerrando servidor Flask...")
        parar_servidor()
        log("‚úÖ Script encerrado")
    except Exception as e:
        log(f"‚ùå Erro inesperado: {e}")
        parar_servidor()
        sys.exit(1)

if __name__ == "__main__":
    main()

